{#- -*- mode: jinja2; -*- -#}
[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
name = "{{ cookiecutter.project.slug }}"
version = "{{ cookiecutter.project.version }}"
description = "{{ cookiecutter.project.description }}"
authors = ["{{ cookiecutter.author.name }} <{{ cookiecutter.author.email }}>"]
{%- if cookiecutter.license %}
license = "{{ cookiecutter.license.name }}"
{%- endif %}
readme = "README.{{ cookiecutter.docs.ext }}"
{%- if cookiecutter.services.github.enabled %}
homepage = "{{ cookiecutter.services.github.project_url }}"
repository = "{{ cookiecutter.services.github.project_url }}"
{%- endif %}
{%- if cookiecutter.services.rtd.enabled %}
documentation = "{{ cookiecutter.services.rtd.project_url }}"
{%- endif %}

{%- if cookiecutter.services.pypi.enabled %}
# PyPI classifiers: https://pypi.org/classifiers/
classifiers = [  # Update me
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Environment :: Console",
]

# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = [
    "{{ cookiecutter.project.slug }}",
    "{{ cookiecutter.project.package }}",
]
{%- endif %}

packages = [
    { include = "{{ cookiecutter.project.package }}", from = "src" },
]

    [tool.poetry.scripts]
    # Entry points for the package https://python-poetry.org/docs/pyproject/#scripts
    {{ cookiecutter.project.slug }} = "{{ cookiecutter.project.package }}.cli:{{ cookiecutter.project.package }}"
    task = "poethepoet:main"

    [tool.poetry.dependencies]
    python = "^3.8"
    click = "^7.1.2"
    rich = "^9.10.0"

    [tool.poetry.dev-dependencies]
    # Core
    poethepoet = "^0.10.0"

    # Style
    black = "^20.8b1"
    isort = "^5.7.0"

    # Complexity
    wily = "^1.19.0"

    # Linters
    bandit = "^1.7.0"
    darglint = "^1.6.0"
    flake8 = "^3.8.4"
    flake8-bandit = "^2.1.2"
    flake8-bugbear = "^20.11.1"
    flake8-docstrings = "^1.5.0"
    flake8-html = "^0.4.1"
    flake8-implicit-str-concat = "^0.2.0"
    flake8-junit-report = "^2.1.0"
    lxml = "^4.6.2"
    mypy = "^0.800"
    pep8-naming = "^0.11.1"
    safety = "^1.10.3"

    # Testing
    assertpy = "^1.1"
    pytest = "^6.2.2"
    pytest-timeout = "^1.4.2"
    pytest-html = "^3.1.1"
    pytest-cov = "^2.11.1"
    xdoctest = "^0.15.4"

    # Documentation
    linkify-it-py = "^1.0.1"
    {%- if cookiecutter.docs.use_markdown %}
    myst-parser = "^0.13.3"
    {%- endif %}
    scanpydoc = "^0.5.6"
    sphinx = "^3.5.1"
    sphinx-autobuild = "^2020.9.1"
    sphinx-autodoc-typehints = "^1.11.1"
    sphinx-click = "^2.5.0"
    sphinx-copybutton = "^0.3.1"
    {%- if cookiecutter.repository.enabled %}
    sphinx-git = "^11.0.0"
    {%- endif %}
    sphinx-inline-tabs = "^2020.10.19b4"
    sphinx-prompt = "^1.3.0"
    sphinxcontrib-plantuml = "^0.19"
    sphinxnotes-strike = "^1.0"
    Pygments = "^2.7.4"
    {{ cookiecutter.docs.theme.package }} = "^{{ cookiecutter.docs.theme.version }}"

    # Integration packages
    {%- if cookiecutter.repository.enabled %}
    pre-commit = "^2.10.1"
    {%- endif %}
    pre-commit-hooks = "^3.4.0"


[tool.black]
# https://github.com/psf/black
line-length = 100
target-version = ["py39"]


[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 100

[tool.pytest.ini_options]
minversion = "6.0"
# Directories that are not visited by pytest collector:
norecursedirs = [
    "*.egg",
    ".*",
    "_darcs",
    "build",
    "CVS",
    "dist",
    "node_modules",
    "venv",
    "{arch}",
    "docs",
    "__pycache__",
]
doctest_optionflags = [
    "NUMBER",
    "NORMALIZE_WHITESPACE",
    "IGNORE_EXCEPTION_DETAIL"
]
# Default dirs
testpaths=["tests"]
cache_dir="build/cache/pytest"
# Extra options:
addopts = """--doctest-modules \
             --doctest-continue-on-failure \
             --cov-branch \
             --strict-markers \
             --xdoctest \
             {%- if cookiecutter.docs.docstring_style == "Google" %}
             --xdoctest-style=google \
             {%- endif %}
             --timeout=10 \
             --tb=short \
             --cov={{ cookiecutter.project.package }} \
             --cov-fail-under=50 \
             --cov-report=xml:build/reports/coverage/coverage.xml \
             --cov-report=html:build/reports/coverage \
             --junitxml=build/reports/tests/tests.xml \
             --html=build/reports/tests/index.html"""

[tool.poe]
executor.type = "poetry"

    [tool.poe.tasks]

        [tool.poe.tasks.clean]
        default_item_type = "cmd"
        help = "Remove all build and temporary files from the project"
        ignore_fail = true
        sequence = [
            "\\rm -rf dist",
            "\\rm -rf build",
            "\\rm -rf docs/_generated",
            "\\rm -rf docs/build",
            "\\rm -rf ./**/__pycache__",
            "\\rm -rf ./**/*.pyc"
        ]

        [tool.poe.tasks.style-black]
        help = "Format all python files using black"
        cmd = "black --config pyproject.toml ."

        [tool.poe.tasks.style-isort]
        help = "Reorder import of all python files using isort"
        cmd = "isort --settings-path pyproject.toml ."

        [tool.poe.tasks.style]
        help = "Re-style the entire project"
        sequence = ["style-black", "style-isort"]

        [tool.poe.tasks.complexity-build]
        help = "Build the index cache used for complexity analysis"
        cmd = "wily --config setup.cfg --cache build/cache/wily build"

        [tool.poe.tasks.complexity]
        help = "Run a complexity analysis"
        sequence = [
            "complexity-build",
            { cmd = """wily --config setup.cfg --cache build/cache/wily diff
                            --all
                            --revision HEAD
                            --metrics cyclomatic.complexity,
                                    maintainability.mi,
                                    halstead.volume,
                                    halstead.difficulty,
                                    halstead.effort,
                                    raw.loc,
                                    raw.comments
                            src""" },
        ]

        [tool.poe.tasks.lint-safety]
        help = "Run safety checks using safety"
        sequence = [
            { cmd = "\\rm -rf build/reports/safety" },
            { cmd = "\\rm -rf build/cache/safety" },
            { cmd = "mkdir -p build/reports/safety" },
            { cmd = "mkdir -p build/cache/safety" },
            { cmd = "poetry export -o build/cache/safety/requirements" },
            { cmd = """safety check --full-report
                                -r build/cache/safety/requirements
                                --ignore=39462
                                --json
                                --output build/reports/safety/safety.json""" },
            { cmd = """safety check --full-report
                                -r build/cache/safety/requirements
                                --ignore=39462
                                --output build/reports/safety/safety.txt""" },
            { cmd = "cat build/reports/safety/safety.txt" },
        ]

        [tool.poe.tasks.lint-mypy]
        help = "Run static typing validations using mypy"
        sequence = [
            { cmd = "\\rm -rf build/reports/typing" },
            { cmd = "mypy --config-file setup.cfg src" },
        ]

        [tool.poe.tasks.lint-flake]
        help = "Run lint validations using flake8"
        sequence = [
            { cmd = "\\rm -rf build/reports/flake" },
            { cmd = "mkdir -p build/reports/flake" },
            { cmd = """flake8 --output=build/reports/flake/flake.txt
                            --format=html
                            --htmldir=build/reports/flake
                            src""" },
            { cmd = """flake8_junit build/reports/flake/flake.txt
                                    build/reports/flake/flake.xml""" },
        ]

        [tool.poe.tasks.lint]
        help = "Run all quality checks"
        sequence = ["lint-mypy", "lint-flake", "lint-safety"]

        [tool.poe.tasks.test]
        help = "Run all unit tests on the project"
        cmd = "pytest"

        [tool.poe.tasks.docs-html]
        help = "Generate project's documentation as an HTML page"
        cmd = "sphinx-build -b html docs build/docs/html"

        [tool.poe.tasks.docs-man]
        help = "Generate project's documentation as a man page"
        cmd = "sphinx-build -b man -D html_theme= docs build/docs/man"

        [tool.poe.tasks.docs-info]
        help = "Generate project's documentation as a texinfo file"
        cmd = "sphinx-build -b texinfo -D html_theme= docs build/docs/info"

        [tool.poe.tasks.docs-coverage]
        help = "Displays the documentation coverage for the project"
        cmd = "sphinx-build -b coverage -D html_theme= docs build/reports/docs"

        [tool.poe.tasks.docs-run]
        help = "Start the autobuild service to dynamically update docs"
        cmd = "sphinx-autobuild docs/sources docs/output/html"

        [tool.poe.tasks.docs]
        help = "Generate project's documentation"
        sequence = [
            "docs-html",
            "docs-man",
            "docs-info",
            "docs-coverage",
        ]

        [tool.poe.tasks.check]
        help = "Run a full project validation"
        sequence = ["lint", "test"]

        [tool.poe.tasks.build]
        help = "Execute a full build of your project"
        sequence = [
            { cmd = "mkdir -p build" },
            "check",
            { cmd = "poetry build" },
            { cmd = "mv dist ./build/" },
            "docs",
        ]
