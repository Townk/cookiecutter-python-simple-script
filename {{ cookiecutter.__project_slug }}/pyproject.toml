[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "{{ cookiecutter.__project_slug }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_description }}"
authors = ["{{ cookiecutter.author }} <{{ cookiecutter.email }}>"]
license = "{{ cookiecutter.license }}"
readme = "README.{{ cookiecutter.__doc_ext }}"
{%- if cookiecutter.__use_github == "True" %}
homepage = "https://github.com/{{ cookiecutter.github_user }}/{{ cookiecutter.__project_slug }}"
repository = "https://github.com/{{ cookiecutter.github_user }}/{{ cookiecutter.__project_slug }}"
{%- endif %}
{%- if cookiecutter.__use_readthedocs == "True" %}
documentation = "https://{{ cookiecutter.__project_slug }}.readthedocs.io"
{%- endif %}

{%- if cookiecutter.__use_pypi == "True" %}
# PyPI classifiers: https://pypi.org/classifiers/
classifiers = [  # Update me
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Environment :: Console",
]

# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = [
    "{{ cookiecutter.__project_slug }}",
    "{{ cookiecutter.__package_name }}",
]
{%- endif %}

packages = [
    { include = "{{ cookiecutter.__package_name }}", from = "src" },
]

[tool.poetry.scripts]
# Entry points for the package https://python-poetry.org/docs/pyproject/#scripts
{{ cookiecutter.__project_slug }} = "{{ cookiecutter.__package_name }}.__main__:{{ cookiecutter.__package_name }}"

[tool.poetry.dependencies]
python = "^3.8"
click = "^7.1.2"
rich = "^9.10.0"

[tool.poetry.dev-dependencies]
# Core
taskipy = "^1.6.0"

# Style
black = "^20.8b1"
isort = "^5.7.0"

# Complexity
wily = "^1.19.0"

# Linters
bandit = "^1.7.0"
darglint = "^1.6.0"
flake8 = "^3.8.4"
flake8-bandit = "^2.1.2"
flake8-bugbear = "^20.11.1"
flake8-docstrings = "^1.5.0"
flake8-html = "^0.4.1"
flake8-implicit-str-concat = "^0.2.0"
flake8-junit-report = "^2.1.0"
lxml = "^4.6.2"
mypy = "^0.800"
pep8-naming = "^0.11.1"
safety = "^1.10.3"
# pylint = {git = "https://github.com/PyCQA/pylint", rev = "master"}

# Testing
assertpy = "^1.1"
pytest = "^5.2"
pytest-timeout = "^1.4.2"
pytest-html = "^3.1.1"
pytest-cov = "^2.11.1"
xdoctest = "^0.15.4"

# Documentation
Pygments = "^2.7.4"
{%- if cookiecutter.__use_markdown == "True" %}
recommonmark = "^0.7.1"
{%- endif %}
sphinx = "^3.4.3"
sphinx-autobuild = "^2020.9.1"
sphinx-click = "^2.5.0"
sphinx-rtd-theme = "^0.5.1"

{%- if cookiecutter.create_git_repository.lower() == "y" %}
# Integration packages
pre-commit = "^2.9.3"
{%- endif %}

[tool.black]
# https://github.com/psf/black
line-length = 100
target-version = ["py38"]


[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 100

[tool.taskipy.tasks]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# These tasks modify files on the system, therefore, they need to run
# before you commit files.
style = """poetry run task style-black **/*.py
           poetry run task style-isort **/*.py"""
# Format Python files
style-black = "poetry run black --config pyproject.toml"
# Reorder imports on Python files
style-isort = "poetry run isort --settings-path pyproject.toml"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Code quality
lint = """poetry run task lint-mypy src/ &&
          poetry run task lint-flake-check src/ &&
          poetry run task lint-safety"""
# Static type checker
pre_lint-mypy = "/bin/rm -rf build/reports/typing"
lint-mypy = "poetry run mypy --config-file setup.cfg"
# Static analysis
pre_lint-flake-check = "/bin/rm -rf build/reports/flake && mkdir -p build/reports/flake"
lint-flake = """/usr/bin/env sh -c '
                    poetry run task lint-flake-check "$@" &&
                    poetry run task lint-flake-report
                ' --"""
lint-flake-check = """poetry run flake8 --output=build/reports/flake/flake.txt \
                                        --format=html \
                                        --htmldir=build/reports/flake"""
lint-flake-report = """poetry run flake8_junit build/reports/flake/flake.txt \
                                               build/reports/flake/flake.xml"""
# Dependencies security check
lint-safety = """poetry run task lint-safety-check &&
                 poetry run task lint-safety-review &&
                 /usr/bin/env sh -c 'echo "$@" > /dev/null ' --"""
pre_lint-safety-check = """/bin/rm -rf build/{reports,cache}/safety &&
                           mkdir -p build/{reports,cache}/safety"""
lint-safety-check = """poetry export > build/cache/safety/requirements &&
                       poetry run safety check --full-report \
                                               -r build/cache/safety/requirements \
                                               --ignore=39462 \
                                               --json \
                                               --output build/reports/safety/safety.json"""
lint-safety-review = """[ -r build/reports/safety/safety.json ] && \
                        poetry run  \
                            safety review \
                                --full-report \
                                -f build/reports/safety/safety.json > \
                                    build/reports/safety/safety.txt &&
                        cat build/reports/safety/safety.txt ||
                        (echo \"You need to run 'poetry run task lint-safety-check' first.\" &&
                         false)"""

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Task to run tests. All options are configured on the 'setup.cfg' file.
tests = "poetry run pytest"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
docs = """poetry run task docs-html &&
          poetry run task docs-man &&
          poetry run task docs-info"""
docs-service = "poetry run sphinx-autobuild docs/sources docs/output/html"
docs-html = "poetry run sphinx-build -b html -j auto docs build/docs/html"
docs-man = "poetry run sphinx-build -b man -j auto docs build/docs/man"
docs-info = "poetry run sphinx-build -b texinfo -j auto docs build/docs/info"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
check = """poetry run task lint  &&
           poetry run task tests"""

build = """poetry run task check &&
           poetry build &&
           mkdir -p build &&
           mv dist ./build &&
           poetry run task docs"""
